"""
Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и
столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы,
которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте,
почему не с нуля). Примечание: бинарной операцией называется любая операция, у которой
ровно два аргумента, как, например, у операции умножения.
Ввод: 
    print_operation_table(lambda x, y: x * y) 1 2 3 4 5 6

Вывод:
    2 4 6 8 10 12
    3 6 9 12 15 18
    4 8 12 16 20 24
    5 10 15 20 25 30
    6 12 18 24 30 36 
    """

print("Программа выводит таблицу умнажения.")
print("Укажите ее размер: ")

# Функция print_operation_table принимает аргумент operation(lambda x, y: x * y)


def print_operation_table(operation):

    # Для регулирования размеров блицы использую ввод с клавиатуры

    num_rows = int(input("Сколько рядов > "))
    num_columns = int(input("Сколько столбцов > "))

    # Цикл который подсмотрел на лекции
    # +1 это нужно чтобы длина была ровна введенному числу
    # 1,2,3,4,5 если + не делать только до 5 будет
    for i in range(1, num_rows + 1):

        for j in range(1, num_columns + 1):
            print(f"|{operation(i, j)}", end="\t|")
        print()


print_operation_table(lambda x, y: x * y)


"""
Сегодня раздумывал о рекурсии и вот что у меня получилось.
"""
# Описывает функцию в которую нужно передать аргумент


def recursion(arguments):
    # Чтобы рекурсия завершилась и копютер не задымился, нужно сделать условие выхода из рекурсии == True.
    if arguments < 0:
        # return если я правильно понял возвращает в arguments, в моем случаи "Ты молодец!"
        return "Ты молодец!"
    # А тут и происходит вся магия. Если я правильно вспомнил урок. Указываем нашу функцию и аргумент с которым нужно что то делать.
    # Функция будет вызывать сама себя с аргументом - 1 
    return recursion(arguments - 1)


x = int(input("Ваше любимое число > "))

result = recursion(x)

print("Рекурсия выполнина успешно.")
print(result)
